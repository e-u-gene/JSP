/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.41
 * Generated at: 2023-01-17 10:25:02 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.Enumeration;
import java.util.Map;

public final class viewParameter_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.Enumeration");
    _jspx_imports_classes.add("java.util.Map");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

/*리퀘스트 객체의 데이터 파일을 utf-8로 인코딩하겠음!
파라미터에 한글이 포함된 경우 인코딩 잘 못하면 글씨가 깨지닉가요,,*/
	request.setCharacterEncoding("utf-8");

      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head><title>요청 파라미터 출력</title></head>\r\n");
      out.write("<body>\r\n");
      out.write("<b>request.getParameter() 메서드 사용</b><br>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!-- name이라는 파라미터에 들어있는 녀석을 출력해라. -->\r\n");
      out.write("<!-- 내가 입력한 파라미터를 가져오는게 바로 getParameter 메소드임. -->\r\n");
      out.write("name 파라미터 = ");
      out.print( request.getParameter("name") );
      out.write(" <br>\r\n");
      out.write("\r\n");
      out.write("address 파라미터 = ");
      out.print( request.getParameter("address") );
      out.write("\r\n");
      out.write("<p>\r\n");
      out.write("<b>request.getParameterValues() 메서드 사용</b><br>\r\n");

/*valuse 라는 메소드는 이름이 pet인 모든 파라미터의 값을 문자열 배열로 구현함...
() 안에 뭐가 들어갔는지에 따라 구현하는 배열이다름.  */
	String[] values = request.getParameterValues("pet");
	if (values != null) {
	for (int i = 0 ; i < values.length ; i++) {

      out.write('\r');
      out.write('\n');
      out.write('	');
      out.print( values[i] );
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!-- 여기서 다시 스크립트렛을 쓴이유는?\r\n");
      out.write("출력을 위해서는 표현식이 필요한데 표현식이후 스크립트렛으로 다시 for문과 if문의 괄호를 닫아줘야 하므로. -->\r\n");

		}
	}

      out.write("\r\n");
      out.write("<p>\r\n");
      out.write("<b>request.getParameterNames() 메서드 사용</b><br>\r\n");

	Enumeration paramEnum = request.getParameterNames();
	while(paramEnum.hasMoreElements()) {
		String name = (String)paramEnum.nextElement();

      out.write("\r\n");
      out.write("\t\t");
      out.print( name );
      out.write('\r');
      out.write('\n');

	}

      out.write("\r\n");
      out.write("<p>\r\n");
      out.write("<b>request.getParameterMap() 메서드 사용</b><br>\r\n");

	Map parameterMap = request.getParameterMap();
/*{"name" : "홍길동" ,"address" : "서울", "pet" :{"dog","cat","pig"}  */
	String[] nameParam = (String[])parameterMap.get("name");
	if (nameParam != null) {

      out.write("\r\n");
      out.write("name = ");
      out.print( nameParam[0] );
      out.write('\r');
      out.write('\n');

	}

      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
